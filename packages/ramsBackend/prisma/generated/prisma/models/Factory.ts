
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Factory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Factory
 * 
 */
export type FactoryModel = runtime.Types.Result.DefaultSelection<Prisma.$FactoryPayload>

export type AggregateFactory = {
  _count: FactoryCountAggregateOutputType | null
  _min: FactoryMinAggregateOutputType | null
  _max: FactoryMaxAggregateOutputType | null
}

export type FactoryMinAggregateOutputType = {
  id: string | null
  name: string | null
  timeZone: string | null
}

export type FactoryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  timeZone: string | null
}

export type FactoryCountAggregateOutputType = {
  id: number
  name: number
  timeZone: number
  _all: number
}


export type FactoryMinAggregateInputType = {
  id?: true
  name?: true
  timeZone?: true
}

export type FactoryMaxAggregateInputType = {
  id?: true
  name?: true
  timeZone?: true
}

export type FactoryCountAggregateInputType = {
  id?: true
  name?: true
  timeZone?: true
  _all?: true
}

export type FactoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Factory to aggregate.
   */
  where?: Prisma.FactoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Factories to fetch.
   */
  orderBy?: Prisma.FactoryOrderByWithRelationInput | Prisma.FactoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FactoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Factories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Factories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Factories
  **/
  _count?: true | FactoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FactoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FactoryMaxAggregateInputType
}

export type GetFactoryAggregateType<T extends FactoryAggregateArgs> = {
      [P in keyof T & keyof AggregateFactory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFactory[P]>
    : Prisma.GetScalarType<T[P], AggregateFactory[P]>
}




export type FactoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FactoryWhereInput
  orderBy?: Prisma.FactoryOrderByWithAggregationInput | Prisma.FactoryOrderByWithAggregationInput[]
  by: Prisma.FactoryScalarFieldEnum[] | Prisma.FactoryScalarFieldEnum
  having?: Prisma.FactoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FactoryCountAggregateInputType | true
  _min?: FactoryMinAggregateInputType
  _max?: FactoryMaxAggregateInputType
}

export type FactoryGroupByOutputType = {
  id: string
  name: string
  timeZone: string
  _count: FactoryCountAggregateOutputType | null
  _min: FactoryMinAggregateOutputType | null
  _max: FactoryMaxAggregateOutputType | null
}

type GetFactoryGroupByPayload<T extends FactoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FactoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FactoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FactoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FactoryGroupByOutputType[P]>
      }
    >
  >



export type FactoryWhereInput = {
  AND?: Prisma.FactoryWhereInput | Prisma.FactoryWhereInput[]
  OR?: Prisma.FactoryWhereInput[]
  NOT?: Prisma.FactoryWhereInput | Prisma.FactoryWhereInput[]
  id?: Prisma.StringFilter<"Factory"> | string
  name?: Prisma.StringFilter<"Factory"> | string
  timeZone?: Prisma.StringFilter<"Factory"> | string
  allocatablePersonnel?: Prisma.PersonnelListRelationFilter
  Reservation?: Prisma.ReservationListRelationFilter
}

export type FactoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  timeZone?: Prisma.SortOrder
  allocatablePersonnel?: Prisma.PersonnelOrderByRelationAggregateInput
  Reservation?: Prisma.ReservationOrderByRelationAggregateInput
}

export type FactoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.FactoryWhereInput | Prisma.FactoryWhereInput[]
  OR?: Prisma.FactoryWhereInput[]
  NOT?: Prisma.FactoryWhereInput | Prisma.FactoryWhereInput[]
  timeZone?: Prisma.StringFilter<"Factory"> | string
  allocatablePersonnel?: Prisma.PersonnelListRelationFilter
  Reservation?: Prisma.ReservationListRelationFilter
}, "id" | "name">

export type FactoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  timeZone?: Prisma.SortOrder
  _count?: Prisma.FactoryCountOrderByAggregateInput
  _max?: Prisma.FactoryMaxOrderByAggregateInput
  _min?: Prisma.FactoryMinOrderByAggregateInput
}

export type FactoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.FactoryScalarWhereWithAggregatesInput | Prisma.FactoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.FactoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FactoryScalarWhereWithAggregatesInput | Prisma.FactoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Factory"> | string
  name?: Prisma.StringWithAggregatesFilter<"Factory"> | string
  timeZone?: Prisma.StringWithAggregatesFilter<"Factory"> | string
}

export type FactoryCreateInput = {
  id?: string
  name: string
  timeZone: string
  allocatablePersonnel?: Prisma.PersonnelCreateNestedManyWithoutAllocatableToFactoriesInput
  Reservation?: Prisma.ReservationCreateNestedManyWithoutFactoryInput
}

export type FactoryUncheckedCreateInput = {
  id?: string
  name: string
  timeZone: string
  allocatablePersonnel?: Prisma.PersonnelUncheckedCreateNestedManyWithoutAllocatableToFactoriesInput
  Reservation?: Prisma.ReservationUncheckedCreateNestedManyWithoutFactoryInput
}

export type FactoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  allocatablePersonnel?: Prisma.PersonnelUpdateManyWithoutAllocatableToFactoriesNestedInput
  Reservation?: Prisma.ReservationUpdateManyWithoutFactoryNestedInput
}

export type FactoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  allocatablePersonnel?: Prisma.PersonnelUncheckedUpdateManyWithoutAllocatableToFactoriesNestedInput
  Reservation?: Prisma.ReservationUncheckedUpdateManyWithoutFactoryNestedInput
}

export type FactoryCreateManyInput = {
  id?: string
  name: string
  timeZone: string
}

export type FactoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FactoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FactoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  timeZone?: Prisma.SortOrder
}

export type FactoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  timeZone?: Prisma.SortOrder
}

export type FactoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  timeZone?: Prisma.SortOrder
}

export type FactoryListRelationFilter = {
  every?: Prisma.FactoryWhereInput
  some?: Prisma.FactoryWhereInput
  none?: Prisma.FactoryWhereInput
}

export type FactoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FactoryScalarRelationFilter = {
  is?: Prisma.FactoryWhereInput
  isNot?: Prisma.FactoryWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type FactoryCreateNestedManyWithoutAllocatablePersonnelInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput> | Prisma.FactoryCreateWithoutAllocatablePersonnelInput[] | Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput[]
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput | Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput[]
  connect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
}

export type FactoryUncheckedCreateNestedManyWithoutAllocatablePersonnelInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput> | Prisma.FactoryCreateWithoutAllocatablePersonnelInput[] | Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput[]
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput | Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput[]
  connect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
}

export type FactoryUpdateManyWithoutAllocatablePersonnelNestedInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput> | Prisma.FactoryCreateWithoutAllocatablePersonnelInput[] | Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput[]
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput | Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput[]
  upsert?: Prisma.FactoryUpsertWithWhereUniqueWithoutAllocatablePersonnelInput | Prisma.FactoryUpsertWithWhereUniqueWithoutAllocatablePersonnelInput[]
  set?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  disconnect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  delete?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  connect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  update?: Prisma.FactoryUpdateWithWhereUniqueWithoutAllocatablePersonnelInput | Prisma.FactoryUpdateWithWhereUniqueWithoutAllocatablePersonnelInput[]
  updateMany?: Prisma.FactoryUpdateManyWithWhereWithoutAllocatablePersonnelInput | Prisma.FactoryUpdateManyWithWhereWithoutAllocatablePersonnelInput[]
  deleteMany?: Prisma.FactoryScalarWhereInput | Prisma.FactoryScalarWhereInput[]
}

export type FactoryUncheckedUpdateManyWithoutAllocatablePersonnelNestedInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput> | Prisma.FactoryCreateWithoutAllocatablePersonnelInput[] | Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput[]
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput | Prisma.FactoryCreateOrConnectWithoutAllocatablePersonnelInput[]
  upsert?: Prisma.FactoryUpsertWithWhereUniqueWithoutAllocatablePersonnelInput | Prisma.FactoryUpsertWithWhereUniqueWithoutAllocatablePersonnelInput[]
  set?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  disconnect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  delete?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  connect?: Prisma.FactoryWhereUniqueInput | Prisma.FactoryWhereUniqueInput[]
  update?: Prisma.FactoryUpdateWithWhereUniqueWithoutAllocatablePersonnelInput | Prisma.FactoryUpdateWithWhereUniqueWithoutAllocatablePersonnelInput[]
  updateMany?: Prisma.FactoryUpdateManyWithWhereWithoutAllocatablePersonnelInput | Prisma.FactoryUpdateManyWithWhereWithoutAllocatablePersonnelInput[]
  deleteMany?: Prisma.FactoryScalarWhereInput | Prisma.FactoryScalarWhereInput[]
}

export type FactoryCreateNestedOneWithoutReservationInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutReservationInput, Prisma.FactoryUncheckedCreateWithoutReservationInput>
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutReservationInput
  connect?: Prisma.FactoryWhereUniqueInput
}

export type FactoryUpdateOneRequiredWithoutReservationNestedInput = {
  create?: Prisma.XOR<Prisma.FactoryCreateWithoutReservationInput, Prisma.FactoryUncheckedCreateWithoutReservationInput>
  connectOrCreate?: Prisma.FactoryCreateOrConnectWithoutReservationInput
  upsert?: Prisma.FactoryUpsertWithoutReservationInput
  connect?: Prisma.FactoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FactoryUpdateToOneWithWhereWithoutReservationInput, Prisma.FactoryUpdateWithoutReservationInput>, Prisma.FactoryUncheckedUpdateWithoutReservationInput>
}

export type FactoryCreateWithoutAllocatablePersonnelInput = {
  id?: string
  name: string
  timeZone: string
  Reservation?: Prisma.ReservationCreateNestedManyWithoutFactoryInput
}

export type FactoryUncheckedCreateWithoutAllocatablePersonnelInput = {
  id?: string
  name: string
  timeZone: string
  Reservation?: Prisma.ReservationUncheckedCreateNestedManyWithoutFactoryInput
}

export type FactoryCreateOrConnectWithoutAllocatablePersonnelInput = {
  where: Prisma.FactoryWhereUniqueInput
  create: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput>
}

export type FactoryUpsertWithWhereUniqueWithoutAllocatablePersonnelInput = {
  where: Prisma.FactoryWhereUniqueInput
  update: Prisma.XOR<Prisma.FactoryUpdateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedUpdateWithoutAllocatablePersonnelInput>
  create: Prisma.XOR<Prisma.FactoryCreateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedCreateWithoutAllocatablePersonnelInput>
}

export type FactoryUpdateWithWhereUniqueWithoutAllocatablePersonnelInput = {
  where: Prisma.FactoryWhereUniqueInput
  data: Prisma.XOR<Prisma.FactoryUpdateWithoutAllocatablePersonnelInput, Prisma.FactoryUncheckedUpdateWithoutAllocatablePersonnelInput>
}

export type FactoryUpdateManyWithWhereWithoutAllocatablePersonnelInput = {
  where: Prisma.FactoryScalarWhereInput
  data: Prisma.XOR<Prisma.FactoryUpdateManyMutationInput, Prisma.FactoryUncheckedUpdateManyWithoutAllocatablePersonnelInput>
}

export type FactoryScalarWhereInput = {
  AND?: Prisma.FactoryScalarWhereInput | Prisma.FactoryScalarWhereInput[]
  OR?: Prisma.FactoryScalarWhereInput[]
  NOT?: Prisma.FactoryScalarWhereInput | Prisma.FactoryScalarWhereInput[]
  id?: Prisma.StringFilter<"Factory"> | string
  name?: Prisma.StringFilter<"Factory"> | string
  timeZone?: Prisma.StringFilter<"Factory"> | string
}

export type FactoryCreateWithoutReservationInput = {
  id?: string
  name: string
  timeZone: string
  allocatablePersonnel?: Prisma.PersonnelCreateNestedManyWithoutAllocatableToFactoriesInput
}

export type FactoryUncheckedCreateWithoutReservationInput = {
  id?: string
  name: string
  timeZone: string
  allocatablePersonnel?: Prisma.PersonnelUncheckedCreateNestedManyWithoutAllocatableToFactoriesInput
}

export type FactoryCreateOrConnectWithoutReservationInput = {
  where: Prisma.FactoryWhereUniqueInput
  create: Prisma.XOR<Prisma.FactoryCreateWithoutReservationInput, Prisma.FactoryUncheckedCreateWithoutReservationInput>
}

export type FactoryUpsertWithoutReservationInput = {
  update: Prisma.XOR<Prisma.FactoryUpdateWithoutReservationInput, Prisma.FactoryUncheckedUpdateWithoutReservationInput>
  create: Prisma.XOR<Prisma.FactoryCreateWithoutReservationInput, Prisma.FactoryUncheckedCreateWithoutReservationInput>
  where?: Prisma.FactoryWhereInput
}

export type FactoryUpdateToOneWithWhereWithoutReservationInput = {
  where?: Prisma.FactoryWhereInput
  data: Prisma.XOR<Prisma.FactoryUpdateWithoutReservationInput, Prisma.FactoryUncheckedUpdateWithoutReservationInput>
}

export type FactoryUpdateWithoutReservationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  allocatablePersonnel?: Prisma.PersonnelUpdateManyWithoutAllocatableToFactoriesNestedInput
}

export type FactoryUncheckedUpdateWithoutReservationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  allocatablePersonnel?: Prisma.PersonnelUncheckedUpdateManyWithoutAllocatableToFactoriesNestedInput
}

export type FactoryUpdateWithoutAllocatablePersonnelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  Reservation?: Prisma.ReservationUpdateManyWithoutFactoryNestedInput
}

export type FactoryUncheckedUpdateWithoutAllocatablePersonnelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
  Reservation?: Prisma.ReservationUncheckedUpdateManyWithoutFactoryNestedInput
}

export type FactoryUncheckedUpdateManyWithoutAllocatablePersonnelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type FactoryCountOutputType
 */

export type FactoryCountOutputType = {
  allocatablePersonnel: number
  Reservation: number
}

export type FactoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allocatablePersonnel?: boolean | FactoryCountOutputTypeCountAllocatablePersonnelArgs
  Reservation?: boolean | FactoryCountOutputTypeCountReservationArgs
}

/**
 * FactoryCountOutputType without action
 */
export type FactoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FactoryCountOutputType
   */
  select?: Prisma.FactoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FactoryCountOutputType without action
 */
export type FactoryCountOutputTypeCountAllocatablePersonnelArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PersonnelWhereInput
}

/**
 * FactoryCountOutputType without action
 */
export type FactoryCountOutputTypeCountReservationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReservationWhereInput
}


export type FactorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  timeZone?: boolean
  allocatablePersonnel?: boolean | Prisma.Factory$allocatablePersonnelArgs<ExtArgs>
  Reservation?: boolean | Prisma.Factory$ReservationArgs<ExtArgs>
  _count?: boolean | Prisma.FactoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["factory"]>

export type FactorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  timeZone?: boolean
}, ExtArgs["result"]["factory"]>

export type FactorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  timeZone?: boolean
}, ExtArgs["result"]["factory"]>

export type FactorySelectScalar = {
  id?: boolean
  name?: boolean
  timeZone?: boolean
}

export type FactoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "timeZone", ExtArgs["result"]["factory"]>
export type FactoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allocatablePersonnel?: boolean | Prisma.Factory$allocatablePersonnelArgs<ExtArgs>
  Reservation?: boolean | Prisma.Factory$ReservationArgs<ExtArgs>
  _count?: boolean | Prisma.FactoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type FactoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type FactoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $FactoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Factory"
  objects: {
    allocatablePersonnel: Prisma.$PersonnelPayload<ExtArgs>[]
    Reservation: Prisma.$ReservationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    timeZone: string
  }, ExtArgs["result"]["factory"]>
  composites: {}
}

export type FactoryGetPayload<S extends boolean | null | undefined | FactoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FactoryPayload, S>

export type FactoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FactoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FactoryCountAggregateInputType | true
  }

export interface FactoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factory'], meta: { name: 'Factory' } }
  /**
   * Find zero or one Factory that matches the filter.
   * @param {FactoryFindUniqueArgs} args - Arguments to find a Factory
   * @example
   * // Get one Factory
   * const factory = await prisma.factory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FactoryFindUniqueArgs>(args: Prisma.SelectSubset<T, FactoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Factory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FactoryFindUniqueOrThrowArgs} args - Arguments to find a Factory
   * @example
   * // Get one Factory
   * const factory = await prisma.factory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FactoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FactoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Factory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryFindFirstArgs} args - Arguments to find a Factory
   * @example
   * // Get one Factory
   * const factory = await prisma.factory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FactoryFindFirstArgs>(args?: Prisma.SelectSubset<T, FactoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Factory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryFindFirstOrThrowArgs} args - Arguments to find a Factory
   * @example
   * // Get one Factory
   * const factory = await prisma.factory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FactoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FactoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Factories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Factories
   * const factories = await prisma.factory.findMany()
   * 
   * // Get first 10 Factories
   * const factories = await prisma.factory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const factoryWithIdOnly = await prisma.factory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FactoryFindManyArgs>(args?: Prisma.SelectSubset<T, FactoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Factory.
   * @param {FactoryCreateArgs} args - Arguments to create a Factory.
   * @example
   * // Create one Factory
   * const Factory = await prisma.factory.create({
   *   data: {
   *     // ... data to create a Factory
   *   }
   * })
   * 
   */
  create<T extends FactoryCreateArgs>(args: Prisma.SelectSubset<T, FactoryCreateArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Factories.
   * @param {FactoryCreateManyArgs} args - Arguments to create many Factories.
   * @example
   * // Create many Factories
   * const factory = await prisma.factory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FactoryCreateManyArgs>(args?: Prisma.SelectSubset<T, FactoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Factories and returns the data saved in the database.
   * @param {FactoryCreateManyAndReturnArgs} args - Arguments to create many Factories.
   * @example
   * // Create many Factories
   * const factory = await prisma.factory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Factories and only return the `id`
   * const factoryWithIdOnly = await prisma.factory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FactoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FactoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Factory.
   * @param {FactoryDeleteArgs} args - Arguments to delete one Factory.
   * @example
   * // Delete one Factory
   * const Factory = await prisma.factory.delete({
   *   where: {
   *     // ... filter to delete one Factory
   *   }
   * })
   * 
   */
  delete<T extends FactoryDeleteArgs>(args: Prisma.SelectSubset<T, FactoryDeleteArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Factory.
   * @param {FactoryUpdateArgs} args - Arguments to update one Factory.
   * @example
   * // Update one Factory
   * const factory = await prisma.factory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FactoryUpdateArgs>(args: Prisma.SelectSubset<T, FactoryUpdateArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Factories.
   * @param {FactoryDeleteManyArgs} args - Arguments to filter Factories to delete.
   * @example
   * // Delete a few Factories
   * const { count } = await prisma.factory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FactoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, FactoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Factories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Factories
   * const factory = await prisma.factory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FactoryUpdateManyArgs>(args: Prisma.SelectSubset<T, FactoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Factories and returns the data updated in the database.
   * @param {FactoryUpdateManyAndReturnArgs} args - Arguments to update many Factories.
   * @example
   * // Update many Factories
   * const factory = await prisma.factory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Factories and only return the `id`
   * const factoryWithIdOnly = await prisma.factory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FactoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FactoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Factory.
   * @param {FactoryUpsertArgs} args - Arguments to update or create a Factory.
   * @example
   * // Update or create a Factory
   * const factory = await prisma.factory.upsert({
   *   create: {
   *     // ... data to create a Factory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Factory we want to update
   *   }
   * })
   */
  upsert<T extends FactoryUpsertArgs>(args: Prisma.SelectSubset<T, FactoryUpsertArgs<ExtArgs>>): Prisma.Prisma__FactoryClient<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Factories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryCountArgs} args - Arguments to filter Factories to count.
   * @example
   * // Count the number of Factories
   * const count = await prisma.factory.count({
   *   where: {
   *     // ... the filter for the Factories we want to count
   *   }
   * })
  **/
  count<T extends FactoryCountArgs>(
    args?: Prisma.Subset<T, FactoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FactoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Factory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FactoryAggregateArgs>(args: Prisma.Subset<T, FactoryAggregateArgs>): Prisma.PrismaPromise<GetFactoryAggregateType<T>>

  /**
   * Group by Factory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FactoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FactoryGroupByArgs['orderBy'] }
      : { orderBy?: FactoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FactoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Factory model
 */
readonly fields: FactoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Factory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FactoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  allocatablePersonnel<T extends Prisma.Factory$allocatablePersonnelArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Factory$allocatablePersonnelArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Reservation<T extends Prisma.Factory$ReservationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Factory$ReservationArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Factory model
 */
export interface FactoryFieldRefs {
  readonly id: Prisma.FieldRef<"Factory", 'String'>
  readonly name: Prisma.FieldRef<"Factory", 'String'>
  readonly timeZone: Prisma.FieldRef<"Factory", 'String'>
}
    

// Custom InputTypes
/**
 * Factory findUnique
 */
export type FactoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter, which Factory to fetch.
   */
  where: Prisma.FactoryWhereUniqueInput
}

/**
 * Factory findUniqueOrThrow
 */
export type FactoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter, which Factory to fetch.
   */
  where: Prisma.FactoryWhereUniqueInput
}

/**
 * Factory findFirst
 */
export type FactoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter, which Factory to fetch.
   */
  where?: Prisma.FactoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Factories to fetch.
   */
  orderBy?: Prisma.FactoryOrderByWithRelationInput | Prisma.FactoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Factories.
   */
  cursor?: Prisma.FactoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Factories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Factories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Factories.
   */
  distinct?: Prisma.FactoryScalarFieldEnum | Prisma.FactoryScalarFieldEnum[]
}

/**
 * Factory findFirstOrThrow
 */
export type FactoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter, which Factory to fetch.
   */
  where?: Prisma.FactoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Factories to fetch.
   */
  orderBy?: Prisma.FactoryOrderByWithRelationInput | Prisma.FactoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Factories.
   */
  cursor?: Prisma.FactoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Factories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Factories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Factories.
   */
  distinct?: Prisma.FactoryScalarFieldEnum | Prisma.FactoryScalarFieldEnum[]
}

/**
 * Factory findMany
 */
export type FactoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter, which Factories to fetch.
   */
  where?: Prisma.FactoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Factories to fetch.
   */
  orderBy?: Prisma.FactoryOrderByWithRelationInput | Prisma.FactoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Factories.
   */
  cursor?: Prisma.FactoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Factories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Factories.
   */
  skip?: number
  distinct?: Prisma.FactoryScalarFieldEnum | Prisma.FactoryScalarFieldEnum[]
}

/**
 * Factory create
 */
export type FactoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * The data needed to create a Factory.
   */
  data: Prisma.XOR<Prisma.FactoryCreateInput, Prisma.FactoryUncheckedCreateInput>
}

/**
 * Factory createMany
 */
export type FactoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Factories.
   */
  data: Prisma.FactoryCreateManyInput | Prisma.FactoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Factory createManyAndReturn
 */
export type FactoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * The data used to create many Factories.
   */
  data: Prisma.FactoryCreateManyInput | Prisma.FactoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Factory update
 */
export type FactoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * The data needed to update a Factory.
   */
  data: Prisma.XOR<Prisma.FactoryUpdateInput, Prisma.FactoryUncheckedUpdateInput>
  /**
   * Choose, which Factory to update.
   */
  where: Prisma.FactoryWhereUniqueInput
}

/**
 * Factory updateMany
 */
export type FactoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Factories.
   */
  data: Prisma.XOR<Prisma.FactoryUpdateManyMutationInput, Prisma.FactoryUncheckedUpdateManyInput>
  /**
   * Filter which Factories to update
   */
  where?: Prisma.FactoryWhereInput
  /**
   * Limit how many Factories to update.
   */
  limit?: number
}

/**
 * Factory updateManyAndReturn
 */
export type FactoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * The data used to update Factories.
   */
  data: Prisma.XOR<Prisma.FactoryUpdateManyMutationInput, Prisma.FactoryUncheckedUpdateManyInput>
  /**
   * Filter which Factories to update
   */
  where?: Prisma.FactoryWhereInput
  /**
   * Limit how many Factories to update.
   */
  limit?: number
}

/**
 * Factory upsert
 */
export type FactoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * The filter to search for the Factory to update in case it exists.
   */
  where: Prisma.FactoryWhereUniqueInput
  /**
   * In case the Factory found by the `where` argument doesn't exist, create a new Factory with this data.
   */
  create: Prisma.XOR<Prisma.FactoryCreateInput, Prisma.FactoryUncheckedCreateInput>
  /**
   * In case the Factory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FactoryUpdateInput, Prisma.FactoryUncheckedUpdateInput>
}

/**
 * Factory delete
 */
export type FactoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  /**
   * Filter which Factory to delete.
   */
  where: Prisma.FactoryWhereUniqueInput
}

/**
 * Factory deleteMany
 */
export type FactoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Factories to delete
   */
  where?: Prisma.FactoryWhereInput
  /**
   * Limit how many Factories to delete.
   */
  limit?: number
}

/**
 * Factory.allocatablePersonnel
 */
export type Factory$allocatablePersonnelArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  where?: Prisma.PersonnelWhereInput
  orderBy?: Prisma.PersonnelOrderByWithRelationInput | Prisma.PersonnelOrderByWithRelationInput[]
  cursor?: Prisma.PersonnelWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PersonnelScalarFieldEnum | Prisma.PersonnelScalarFieldEnum[]
}

/**
 * Factory.Reservation
 */
export type Factory$ReservationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reservation
   */
  select?: Prisma.ReservationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reservation
   */
  omit?: Prisma.ReservationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReservationInclude<ExtArgs> | null
  where?: Prisma.ReservationWhereInput
  orderBy?: Prisma.ReservationOrderByWithRelationInput | Prisma.ReservationOrderByWithRelationInput[]
  cursor?: Prisma.ReservationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReservationScalarFieldEnum | Prisma.ReservationScalarFieldEnum[]
}

/**
 * Factory without action
 */
export type FactoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
}
