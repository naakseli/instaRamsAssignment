
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Personnel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Personnel
 * 
 */
export type PersonnelModel = runtime.Types.Result.DefaultSelection<Prisma.$PersonnelPayload>

export type AggregatePersonnel = {
  _count: PersonnelCountAggregateOutputType | null
  _min: PersonnelMinAggregateOutputType | null
  _max: PersonnelMaxAggregateOutputType | null
}

export type PersonnelMinAggregateOutputType = {
  id: string | null
  personalId: string | null
  fullName: string | null
  email: string | null
}

export type PersonnelMaxAggregateOutputType = {
  id: string | null
  personalId: string | null
  fullName: string | null
  email: string | null
}

export type PersonnelCountAggregateOutputType = {
  id: number
  personalId: number
  fullName: number
  email: number
  _all: number
}


export type PersonnelMinAggregateInputType = {
  id?: true
  personalId?: true
  fullName?: true
  email?: true
}

export type PersonnelMaxAggregateInputType = {
  id?: true
  personalId?: true
  fullName?: true
  email?: true
}

export type PersonnelCountAggregateInputType = {
  id?: true
  personalId?: true
  fullName?: true
  email?: true
  _all?: true
}

export type PersonnelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Personnel to aggregate.
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Personnel to fetch.
   */
  orderBy?: Prisma.PersonnelOrderByWithRelationInput | Prisma.PersonnelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PersonnelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Personnel from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Personnel.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Personnel
  **/
  _count?: true | PersonnelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PersonnelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PersonnelMaxAggregateInputType
}

export type GetPersonnelAggregateType<T extends PersonnelAggregateArgs> = {
      [P in keyof T & keyof AggregatePersonnel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePersonnel[P]>
    : Prisma.GetScalarType<T[P], AggregatePersonnel[P]>
}




export type PersonnelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PersonnelWhereInput
  orderBy?: Prisma.PersonnelOrderByWithAggregationInput | Prisma.PersonnelOrderByWithAggregationInput[]
  by: Prisma.PersonnelScalarFieldEnum[] | Prisma.PersonnelScalarFieldEnum
  having?: Prisma.PersonnelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PersonnelCountAggregateInputType | true
  _min?: PersonnelMinAggregateInputType
  _max?: PersonnelMaxAggregateInputType
}

export type PersonnelGroupByOutputType = {
  id: string
  personalId: string
  fullName: string
  email: string
  _count: PersonnelCountAggregateOutputType | null
  _min: PersonnelMinAggregateOutputType | null
  _max: PersonnelMaxAggregateOutputType | null
}

type GetPersonnelGroupByPayload<T extends PersonnelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PersonnelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PersonnelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PersonnelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PersonnelGroupByOutputType[P]>
      }
    >
  >



export type PersonnelWhereInput = {
  AND?: Prisma.PersonnelWhereInput | Prisma.PersonnelWhereInput[]
  OR?: Prisma.PersonnelWhereInput[]
  NOT?: Prisma.PersonnelWhereInput | Prisma.PersonnelWhereInput[]
  id?: Prisma.StringFilter<"Personnel"> | string
  personalId?: Prisma.StringFilter<"Personnel"> | string
  fullName?: Prisma.StringFilter<"Personnel"> | string
  email?: Prisma.StringFilter<"Personnel"> | string
  allocatableToFactories?: Prisma.FactoryListRelationFilter
  reservations?: Prisma.ReservationListRelationFilter
}

export type PersonnelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  personalId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  allocatableToFactories?: Prisma.FactoryOrderByRelationAggregateInput
  reservations?: Prisma.ReservationOrderByRelationAggregateInput
}

export type PersonnelWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  personalId?: string
  email?: string
  AND?: Prisma.PersonnelWhereInput | Prisma.PersonnelWhereInput[]
  OR?: Prisma.PersonnelWhereInput[]
  NOT?: Prisma.PersonnelWhereInput | Prisma.PersonnelWhereInput[]
  fullName?: Prisma.StringFilter<"Personnel"> | string
  allocatableToFactories?: Prisma.FactoryListRelationFilter
  reservations?: Prisma.ReservationListRelationFilter
}, "id" | "personalId" | "email">

export type PersonnelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  personalId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.PersonnelCountOrderByAggregateInput
  _max?: Prisma.PersonnelMaxOrderByAggregateInput
  _min?: Prisma.PersonnelMinOrderByAggregateInput
}

export type PersonnelScalarWhereWithAggregatesInput = {
  AND?: Prisma.PersonnelScalarWhereWithAggregatesInput | Prisma.PersonnelScalarWhereWithAggregatesInput[]
  OR?: Prisma.PersonnelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PersonnelScalarWhereWithAggregatesInput | Prisma.PersonnelScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Personnel"> | string
  personalId?: Prisma.StringWithAggregatesFilter<"Personnel"> | string
  fullName?: Prisma.StringWithAggregatesFilter<"Personnel"> | string
  email?: Prisma.StringWithAggregatesFilter<"Personnel"> | string
}

export type PersonnelCreateInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  allocatableToFactories?: Prisma.FactoryCreateNestedManyWithoutAllocatablePersonnelInput
  reservations?: Prisma.ReservationCreateNestedManyWithoutAllocatedPersonnelInput
}

export type PersonnelUncheckedCreateInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  allocatableToFactories?: Prisma.FactoryUncheckedCreateNestedManyWithoutAllocatablePersonnelInput
  reservations?: Prisma.ReservationUncheckedCreateNestedManyWithoutAllocatedPersonnelInput
}

export type PersonnelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  allocatableToFactories?: Prisma.FactoryUpdateManyWithoutAllocatablePersonnelNestedInput
  reservations?: Prisma.ReservationUpdateManyWithoutAllocatedPersonnelNestedInput
}

export type PersonnelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  allocatableToFactories?: Prisma.FactoryUncheckedUpdateManyWithoutAllocatablePersonnelNestedInput
  reservations?: Prisma.ReservationUncheckedUpdateManyWithoutAllocatedPersonnelNestedInput
}

export type PersonnelCreateManyInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
}

export type PersonnelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PersonnelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PersonnelListRelationFilter = {
  every?: Prisma.PersonnelWhereInput
  some?: Prisma.PersonnelWhereInput
  none?: Prisma.PersonnelWhereInput
}

export type PersonnelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PersonnelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personalId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type PersonnelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personalId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type PersonnelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personalId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type PersonnelCreateNestedManyWithoutAllocatableToFactoriesInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput> | Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput[] | Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput | Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
}

export type PersonnelUncheckedCreateNestedManyWithoutAllocatableToFactoriesInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput> | Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput[] | Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput | Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
}

export type PersonnelUpdateManyWithoutAllocatableToFactoriesNestedInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput> | Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput[] | Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput | Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput[]
  upsert?: Prisma.PersonnelUpsertWithWhereUniqueWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpsertWithWhereUniqueWithoutAllocatableToFactoriesInput[]
  set?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  disconnect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  delete?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  update?: Prisma.PersonnelUpdateWithWhereUniqueWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpdateWithWhereUniqueWithoutAllocatableToFactoriesInput[]
  updateMany?: Prisma.PersonnelUpdateManyWithWhereWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpdateManyWithWhereWithoutAllocatableToFactoriesInput[]
  deleteMany?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
}

export type PersonnelUncheckedUpdateManyWithoutAllocatableToFactoriesNestedInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput> | Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput[] | Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput | Prisma.PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput[]
  upsert?: Prisma.PersonnelUpsertWithWhereUniqueWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpsertWithWhereUniqueWithoutAllocatableToFactoriesInput[]
  set?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  disconnect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  delete?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  update?: Prisma.PersonnelUpdateWithWhereUniqueWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpdateWithWhereUniqueWithoutAllocatableToFactoriesInput[]
  updateMany?: Prisma.PersonnelUpdateManyWithWhereWithoutAllocatableToFactoriesInput | Prisma.PersonnelUpdateManyWithWhereWithoutAllocatableToFactoriesInput[]
  deleteMany?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
}

export type PersonnelCreateNestedManyWithoutReservationsInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput> | Prisma.PersonnelCreateWithoutReservationsInput[] | Prisma.PersonnelUncheckedCreateWithoutReservationsInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutReservationsInput | Prisma.PersonnelCreateOrConnectWithoutReservationsInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
}

export type PersonnelUncheckedCreateNestedManyWithoutReservationsInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput> | Prisma.PersonnelCreateWithoutReservationsInput[] | Prisma.PersonnelUncheckedCreateWithoutReservationsInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutReservationsInput | Prisma.PersonnelCreateOrConnectWithoutReservationsInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
}

export type PersonnelUpdateManyWithoutReservationsNestedInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput> | Prisma.PersonnelCreateWithoutReservationsInput[] | Prisma.PersonnelUncheckedCreateWithoutReservationsInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutReservationsInput | Prisma.PersonnelCreateOrConnectWithoutReservationsInput[]
  upsert?: Prisma.PersonnelUpsertWithWhereUniqueWithoutReservationsInput | Prisma.PersonnelUpsertWithWhereUniqueWithoutReservationsInput[]
  set?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  disconnect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  delete?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  update?: Prisma.PersonnelUpdateWithWhereUniqueWithoutReservationsInput | Prisma.PersonnelUpdateWithWhereUniqueWithoutReservationsInput[]
  updateMany?: Prisma.PersonnelUpdateManyWithWhereWithoutReservationsInput | Prisma.PersonnelUpdateManyWithWhereWithoutReservationsInput[]
  deleteMany?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
}

export type PersonnelUncheckedUpdateManyWithoutReservationsNestedInput = {
  create?: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput> | Prisma.PersonnelCreateWithoutReservationsInput[] | Prisma.PersonnelUncheckedCreateWithoutReservationsInput[]
  connectOrCreate?: Prisma.PersonnelCreateOrConnectWithoutReservationsInput | Prisma.PersonnelCreateOrConnectWithoutReservationsInput[]
  upsert?: Prisma.PersonnelUpsertWithWhereUniqueWithoutReservationsInput | Prisma.PersonnelUpsertWithWhereUniqueWithoutReservationsInput[]
  set?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  disconnect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  delete?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  connect?: Prisma.PersonnelWhereUniqueInput | Prisma.PersonnelWhereUniqueInput[]
  update?: Prisma.PersonnelUpdateWithWhereUniqueWithoutReservationsInput | Prisma.PersonnelUpdateWithWhereUniqueWithoutReservationsInput[]
  updateMany?: Prisma.PersonnelUpdateManyWithWhereWithoutReservationsInput | Prisma.PersonnelUpdateManyWithWhereWithoutReservationsInput[]
  deleteMany?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
}

export type PersonnelCreateWithoutAllocatableToFactoriesInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  reservations?: Prisma.ReservationCreateNestedManyWithoutAllocatedPersonnelInput
}

export type PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  reservations?: Prisma.ReservationUncheckedCreateNestedManyWithoutAllocatedPersonnelInput
}

export type PersonnelCreateOrConnectWithoutAllocatableToFactoriesInput = {
  where: Prisma.PersonnelWhereUniqueInput
  create: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput>
}

export type PersonnelUpsertWithWhereUniqueWithoutAllocatableToFactoriesInput = {
  where: Prisma.PersonnelWhereUniqueInput
  update: Prisma.XOR<Prisma.PersonnelUpdateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedUpdateWithoutAllocatableToFactoriesInput>
  create: Prisma.XOR<Prisma.PersonnelCreateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedCreateWithoutAllocatableToFactoriesInput>
}

export type PersonnelUpdateWithWhereUniqueWithoutAllocatableToFactoriesInput = {
  where: Prisma.PersonnelWhereUniqueInput
  data: Prisma.XOR<Prisma.PersonnelUpdateWithoutAllocatableToFactoriesInput, Prisma.PersonnelUncheckedUpdateWithoutAllocatableToFactoriesInput>
}

export type PersonnelUpdateManyWithWhereWithoutAllocatableToFactoriesInput = {
  where: Prisma.PersonnelScalarWhereInput
  data: Prisma.XOR<Prisma.PersonnelUpdateManyMutationInput, Prisma.PersonnelUncheckedUpdateManyWithoutAllocatableToFactoriesInput>
}

export type PersonnelScalarWhereInput = {
  AND?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
  OR?: Prisma.PersonnelScalarWhereInput[]
  NOT?: Prisma.PersonnelScalarWhereInput | Prisma.PersonnelScalarWhereInput[]
  id?: Prisma.StringFilter<"Personnel"> | string
  personalId?: Prisma.StringFilter<"Personnel"> | string
  fullName?: Prisma.StringFilter<"Personnel"> | string
  email?: Prisma.StringFilter<"Personnel"> | string
}

export type PersonnelCreateWithoutReservationsInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  allocatableToFactories?: Prisma.FactoryCreateNestedManyWithoutAllocatablePersonnelInput
}

export type PersonnelUncheckedCreateWithoutReservationsInput = {
  id?: string
  personalId: string
  fullName: string
  email: string
  allocatableToFactories?: Prisma.FactoryUncheckedCreateNestedManyWithoutAllocatablePersonnelInput
}

export type PersonnelCreateOrConnectWithoutReservationsInput = {
  where: Prisma.PersonnelWhereUniqueInput
  create: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput>
}

export type PersonnelUpsertWithWhereUniqueWithoutReservationsInput = {
  where: Prisma.PersonnelWhereUniqueInput
  update: Prisma.XOR<Prisma.PersonnelUpdateWithoutReservationsInput, Prisma.PersonnelUncheckedUpdateWithoutReservationsInput>
  create: Prisma.XOR<Prisma.PersonnelCreateWithoutReservationsInput, Prisma.PersonnelUncheckedCreateWithoutReservationsInput>
}

export type PersonnelUpdateWithWhereUniqueWithoutReservationsInput = {
  where: Prisma.PersonnelWhereUniqueInput
  data: Prisma.XOR<Prisma.PersonnelUpdateWithoutReservationsInput, Prisma.PersonnelUncheckedUpdateWithoutReservationsInput>
}

export type PersonnelUpdateManyWithWhereWithoutReservationsInput = {
  where: Prisma.PersonnelScalarWhereInput
  data: Prisma.XOR<Prisma.PersonnelUpdateManyMutationInput, Prisma.PersonnelUncheckedUpdateManyWithoutReservationsInput>
}

export type PersonnelUpdateWithoutAllocatableToFactoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  reservations?: Prisma.ReservationUpdateManyWithoutAllocatedPersonnelNestedInput
}

export type PersonnelUncheckedUpdateWithoutAllocatableToFactoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  reservations?: Prisma.ReservationUncheckedUpdateManyWithoutAllocatedPersonnelNestedInput
}

export type PersonnelUncheckedUpdateManyWithoutAllocatableToFactoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PersonnelUpdateWithoutReservationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  allocatableToFactories?: Prisma.FactoryUpdateManyWithoutAllocatablePersonnelNestedInput
}

export type PersonnelUncheckedUpdateWithoutReservationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  allocatableToFactories?: Prisma.FactoryUncheckedUpdateManyWithoutAllocatablePersonnelNestedInput
}

export type PersonnelUncheckedUpdateManyWithoutReservationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personalId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PersonnelCountOutputType
 */

export type PersonnelCountOutputType = {
  allocatableToFactories: number
  reservations: number
}

export type PersonnelCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allocatableToFactories?: boolean | PersonnelCountOutputTypeCountAllocatableToFactoriesArgs
  reservations?: boolean | PersonnelCountOutputTypeCountReservationsArgs
}

/**
 * PersonnelCountOutputType without action
 */
export type PersonnelCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PersonnelCountOutputType
   */
  select?: Prisma.PersonnelCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PersonnelCountOutputType without action
 */
export type PersonnelCountOutputTypeCountAllocatableToFactoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FactoryWhereInput
}

/**
 * PersonnelCountOutputType without action
 */
export type PersonnelCountOutputTypeCountReservationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReservationWhereInput
}


export type PersonnelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  personalId?: boolean
  fullName?: boolean
  email?: boolean
  allocatableToFactories?: boolean | Prisma.Personnel$allocatableToFactoriesArgs<ExtArgs>
  reservations?: boolean | Prisma.Personnel$reservationsArgs<ExtArgs>
  _count?: boolean | Prisma.PersonnelCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["personnel"]>

export type PersonnelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  personalId?: boolean
  fullName?: boolean
  email?: boolean
}, ExtArgs["result"]["personnel"]>

export type PersonnelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  personalId?: boolean
  fullName?: boolean
  email?: boolean
}, ExtArgs["result"]["personnel"]>

export type PersonnelSelectScalar = {
  id?: boolean
  personalId?: boolean
  fullName?: boolean
  email?: boolean
}

export type PersonnelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "personalId" | "fullName" | "email", ExtArgs["result"]["personnel"]>
export type PersonnelInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allocatableToFactories?: boolean | Prisma.Personnel$allocatableToFactoriesArgs<ExtArgs>
  reservations?: boolean | Prisma.Personnel$reservationsArgs<ExtArgs>
  _count?: boolean | Prisma.PersonnelCountOutputTypeDefaultArgs<ExtArgs>
}
export type PersonnelIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PersonnelIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PersonnelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Personnel"
  objects: {
    allocatableToFactories: Prisma.$FactoryPayload<ExtArgs>[]
    reservations: Prisma.$ReservationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    personalId: string
    fullName: string
    email: string
  }, ExtArgs["result"]["personnel"]>
  composites: {}
}

export type PersonnelGetPayload<S extends boolean | null | undefined | PersonnelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PersonnelPayload, S>

export type PersonnelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PersonnelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PersonnelCountAggregateInputType | true
  }

export interface PersonnelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Personnel'], meta: { name: 'Personnel' } }
  /**
   * Find zero or one Personnel that matches the filter.
   * @param {PersonnelFindUniqueArgs} args - Arguments to find a Personnel
   * @example
   * // Get one Personnel
   * const personnel = await prisma.personnel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PersonnelFindUniqueArgs>(args: Prisma.SelectSubset<T, PersonnelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Personnel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PersonnelFindUniqueOrThrowArgs} args - Arguments to find a Personnel
   * @example
   * // Get one Personnel
   * const personnel = await prisma.personnel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PersonnelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PersonnelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Personnel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelFindFirstArgs} args - Arguments to find a Personnel
   * @example
   * // Get one Personnel
   * const personnel = await prisma.personnel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PersonnelFindFirstArgs>(args?: Prisma.SelectSubset<T, PersonnelFindFirstArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Personnel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelFindFirstOrThrowArgs} args - Arguments to find a Personnel
   * @example
   * // Get one Personnel
   * const personnel = await prisma.personnel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PersonnelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PersonnelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Personnel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Personnel
   * const personnel = await prisma.personnel.findMany()
   * 
   * // Get first 10 Personnel
   * const personnel = await prisma.personnel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const personnelWithIdOnly = await prisma.personnel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PersonnelFindManyArgs>(args?: Prisma.SelectSubset<T, PersonnelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Personnel.
   * @param {PersonnelCreateArgs} args - Arguments to create a Personnel.
   * @example
   * // Create one Personnel
   * const Personnel = await prisma.personnel.create({
   *   data: {
   *     // ... data to create a Personnel
   *   }
   * })
   * 
   */
  create<T extends PersonnelCreateArgs>(args: Prisma.SelectSubset<T, PersonnelCreateArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Personnel.
   * @param {PersonnelCreateManyArgs} args - Arguments to create many Personnel.
   * @example
   * // Create many Personnel
   * const personnel = await prisma.personnel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PersonnelCreateManyArgs>(args?: Prisma.SelectSubset<T, PersonnelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Personnel and returns the data saved in the database.
   * @param {PersonnelCreateManyAndReturnArgs} args - Arguments to create many Personnel.
   * @example
   * // Create many Personnel
   * const personnel = await prisma.personnel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Personnel and only return the `id`
   * const personnelWithIdOnly = await prisma.personnel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PersonnelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PersonnelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Personnel.
   * @param {PersonnelDeleteArgs} args - Arguments to delete one Personnel.
   * @example
   * // Delete one Personnel
   * const Personnel = await prisma.personnel.delete({
   *   where: {
   *     // ... filter to delete one Personnel
   *   }
   * })
   * 
   */
  delete<T extends PersonnelDeleteArgs>(args: Prisma.SelectSubset<T, PersonnelDeleteArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Personnel.
   * @param {PersonnelUpdateArgs} args - Arguments to update one Personnel.
   * @example
   * // Update one Personnel
   * const personnel = await prisma.personnel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PersonnelUpdateArgs>(args: Prisma.SelectSubset<T, PersonnelUpdateArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Personnel.
   * @param {PersonnelDeleteManyArgs} args - Arguments to filter Personnel to delete.
   * @example
   * // Delete a few Personnel
   * const { count } = await prisma.personnel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PersonnelDeleteManyArgs>(args?: Prisma.SelectSubset<T, PersonnelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Personnel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Personnel
   * const personnel = await prisma.personnel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PersonnelUpdateManyArgs>(args: Prisma.SelectSubset<T, PersonnelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Personnel and returns the data updated in the database.
   * @param {PersonnelUpdateManyAndReturnArgs} args - Arguments to update many Personnel.
   * @example
   * // Update many Personnel
   * const personnel = await prisma.personnel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Personnel and only return the `id`
   * const personnelWithIdOnly = await prisma.personnel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PersonnelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PersonnelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Personnel.
   * @param {PersonnelUpsertArgs} args - Arguments to update or create a Personnel.
   * @example
   * // Update or create a Personnel
   * const personnel = await prisma.personnel.upsert({
   *   create: {
   *     // ... data to create a Personnel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Personnel we want to update
   *   }
   * })
   */
  upsert<T extends PersonnelUpsertArgs>(args: Prisma.SelectSubset<T, PersonnelUpsertArgs<ExtArgs>>): Prisma.Prisma__PersonnelClient<runtime.Types.Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Personnel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelCountArgs} args - Arguments to filter Personnel to count.
   * @example
   * // Count the number of Personnel
   * const count = await prisma.personnel.count({
   *   where: {
   *     // ... the filter for the Personnel we want to count
   *   }
   * })
  **/
  count<T extends PersonnelCountArgs>(
    args?: Prisma.Subset<T, PersonnelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PersonnelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Personnel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PersonnelAggregateArgs>(args: Prisma.Subset<T, PersonnelAggregateArgs>): Prisma.PrismaPromise<GetPersonnelAggregateType<T>>

  /**
   * Group by Personnel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonnelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PersonnelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PersonnelGroupByArgs['orderBy'] }
      : { orderBy?: PersonnelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PersonnelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonnelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Personnel model
 */
readonly fields: PersonnelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Personnel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PersonnelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  allocatableToFactories<T extends Prisma.Personnel$allocatableToFactoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Personnel$allocatableToFactoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FactoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  reservations<T extends Prisma.Personnel$reservationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Personnel$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Personnel model
 */
export interface PersonnelFieldRefs {
  readonly id: Prisma.FieldRef<"Personnel", 'String'>
  readonly personalId: Prisma.FieldRef<"Personnel", 'String'>
  readonly fullName: Prisma.FieldRef<"Personnel", 'String'>
  readonly email: Prisma.FieldRef<"Personnel", 'String'>
}
    

// Custom InputTypes
/**
 * Personnel findUnique
 */
export type PersonnelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter, which Personnel to fetch.
   */
  where: Prisma.PersonnelWhereUniqueInput
}

/**
 * Personnel findUniqueOrThrow
 */
export type PersonnelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter, which Personnel to fetch.
   */
  where: Prisma.PersonnelWhereUniqueInput
}

/**
 * Personnel findFirst
 */
export type PersonnelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter, which Personnel to fetch.
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Personnel to fetch.
   */
  orderBy?: Prisma.PersonnelOrderByWithRelationInput | Prisma.PersonnelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Personnel.
   */
  cursor?: Prisma.PersonnelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Personnel from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Personnel.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Personnel.
   */
  distinct?: Prisma.PersonnelScalarFieldEnum | Prisma.PersonnelScalarFieldEnum[]
}

/**
 * Personnel findFirstOrThrow
 */
export type PersonnelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter, which Personnel to fetch.
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Personnel to fetch.
   */
  orderBy?: Prisma.PersonnelOrderByWithRelationInput | Prisma.PersonnelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Personnel.
   */
  cursor?: Prisma.PersonnelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Personnel from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Personnel.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Personnel.
   */
  distinct?: Prisma.PersonnelScalarFieldEnum | Prisma.PersonnelScalarFieldEnum[]
}

/**
 * Personnel findMany
 */
export type PersonnelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter, which Personnel to fetch.
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Personnel to fetch.
   */
  orderBy?: Prisma.PersonnelOrderByWithRelationInput | Prisma.PersonnelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Personnel.
   */
  cursor?: Prisma.PersonnelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Personnel from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Personnel.
   */
  skip?: number
  distinct?: Prisma.PersonnelScalarFieldEnum | Prisma.PersonnelScalarFieldEnum[]
}

/**
 * Personnel create
 */
export type PersonnelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * The data needed to create a Personnel.
   */
  data: Prisma.XOR<Prisma.PersonnelCreateInput, Prisma.PersonnelUncheckedCreateInput>
}

/**
 * Personnel createMany
 */
export type PersonnelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Personnel.
   */
  data: Prisma.PersonnelCreateManyInput | Prisma.PersonnelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Personnel createManyAndReturn
 */
export type PersonnelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * The data used to create many Personnel.
   */
  data: Prisma.PersonnelCreateManyInput | Prisma.PersonnelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Personnel update
 */
export type PersonnelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * The data needed to update a Personnel.
   */
  data: Prisma.XOR<Prisma.PersonnelUpdateInput, Prisma.PersonnelUncheckedUpdateInput>
  /**
   * Choose, which Personnel to update.
   */
  where: Prisma.PersonnelWhereUniqueInput
}

/**
 * Personnel updateMany
 */
export type PersonnelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Personnel.
   */
  data: Prisma.XOR<Prisma.PersonnelUpdateManyMutationInput, Prisma.PersonnelUncheckedUpdateManyInput>
  /**
   * Filter which Personnel to update
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * Limit how many Personnel to update.
   */
  limit?: number
}

/**
 * Personnel updateManyAndReturn
 */
export type PersonnelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * The data used to update Personnel.
   */
  data: Prisma.XOR<Prisma.PersonnelUpdateManyMutationInput, Prisma.PersonnelUncheckedUpdateManyInput>
  /**
   * Filter which Personnel to update
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * Limit how many Personnel to update.
   */
  limit?: number
}

/**
 * Personnel upsert
 */
export type PersonnelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * The filter to search for the Personnel to update in case it exists.
   */
  where: Prisma.PersonnelWhereUniqueInput
  /**
   * In case the Personnel found by the `where` argument doesn't exist, create a new Personnel with this data.
   */
  create: Prisma.XOR<Prisma.PersonnelCreateInput, Prisma.PersonnelUncheckedCreateInput>
  /**
   * In case the Personnel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PersonnelUpdateInput, Prisma.PersonnelUncheckedUpdateInput>
}

/**
 * Personnel delete
 */
export type PersonnelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
  /**
   * Filter which Personnel to delete.
   */
  where: Prisma.PersonnelWhereUniqueInput
}

/**
 * Personnel deleteMany
 */
export type PersonnelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Personnel to delete
   */
  where?: Prisma.PersonnelWhereInput
  /**
   * Limit how many Personnel to delete.
   */
  limit?: number
}

/**
 * Personnel.allocatableToFactories
 */
export type Personnel$allocatableToFactoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factory
   */
  select?: Prisma.FactorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factory
   */
  omit?: Prisma.FactoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FactoryInclude<ExtArgs> | null
  where?: Prisma.FactoryWhereInput
  orderBy?: Prisma.FactoryOrderByWithRelationInput | Prisma.FactoryOrderByWithRelationInput[]
  cursor?: Prisma.FactoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FactoryScalarFieldEnum | Prisma.FactoryScalarFieldEnum[]
}

/**
 * Personnel.reservations
 */
export type Personnel$reservationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reservation
   */
  select?: Prisma.ReservationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reservation
   */
  omit?: Prisma.ReservationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReservationInclude<ExtArgs> | null
  where?: Prisma.ReservationWhereInput
  orderBy?: Prisma.ReservationOrderByWithRelationInput | Prisma.ReservationOrderByWithRelationInput[]
  cursor?: Prisma.ReservationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReservationScalarFieldEnum | Prisma.ReservationScalarFieldEnum[]
}

/**
 * Personnel without action
 */
export type PersonnelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Personnel
   */
  select?: Prisma.PersonnelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Personnel
   */
  omit?: Prisma.PersonnelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonnelInclude<ExtArgs> | null
}
